From 95a4fe80c45d3eac57071c7863d049fde4ee5939 Mon Sep 17 00:00:00 2001
From: Rafael Palomar <rafael.palomar@rr-research.no>
Date: Sat, 28 Sep 2019 21:12:05 +0200
Subject: [PATCH] ENH: Add section to install support files in
 SlicerExecutionModel

---
 CMakeLists.txt                             |  28 +++
 GenerateSlicerExecutionModelConfig.cmake   |  10 +-
 SlicerExecutionModelInstallConfig.cmake.in | 189 +++++++++++++++++++++
 3 files changed, 222 insertions(+), 5 deletions(-)
 create mode 100644 SlicerExecutionModelInstallConfig.cmake.in

diff --git a/CMakeLists.txt b/CMakeLists.txt
index ccdc767..ecb4a32 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -15,6 +15,8 @@ project(SlicerExecutionModel CXX)
 
 #-----------------------------------------------------------------------------
 
+
+
 include(CMakeDependentOption)
 
 set(CMAKE_MODULE_PATH ${SlicerExecutionModel_SOURCE_DIR}/CMake ${CMAKE_MODULE_PATH})
@@ -215,3 +217,29 @@ foreach(SCRIPT ${allscripts})
   configure_file(${SCRIPT}
     ${CMAKE_CURRENT_BINARY_DIR}/CMake/${_fileName} COPYONLY IMMEDIATE)
 endforeach()
+
+# --------------------------------------------------------------------------
+# Install support files
+# --------------------------------------------------------------------------
+if(NOT ${PROJECT_NAME}_INSTALL_NO_DEVELOPMENT)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/install/SlicerExecutionModelConfig.cmake
+    DESTINATION ${SlicerExecutionModel_INSTALL_LIB_DIR}
+    COMPONENT Development
+    RENAME SlicerExecutionModelConfig.cmake
+    )
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/UseSlicerExecutionModel.cmake
+    DESTINATION ${SlicerExecutionModel_INSTALL_LIB_DIR}
+    COMPONENT Development
+    RENAME UseSlicerExecutionModel.cmake
+    )
+endif()
+
+foreach(SCRIPT ${allscripts})
+  get_filename_component(_fileName ${SCRIPT} NAME)
+  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/CMake/${_fileName}
+    DESTINATION ${SlicerExecutionModel_INSTALL_LIB_DIR}/CMake
+    COMPONENT Development
+    )
+endforeach()
+
+
diff --git a/GenerateSlicerExecutionModelConfig.cmake b/GenerateSlicerExecutionModelConfig.cmake
index fe15724..b419122 100644
--- a/GenerateSlicerExecutionModelConfig.cmake
+++ b/GenerateSlicerExecutionModelConfig.cmake
@@ -62,8 +62,8 @@ configure_file(
 
 # TODO - Configure SlicerExecutionModelConfig.cmake for the install tree.
 #
-#configure_file(
-#  ${SlicerExecutionModel_SOURCE_DIR}/SlicerExecutionModelInstallConfig.cmake.in
-#  ${SlicerExecutionModel_BINARY_DIR}/install/SlicerExecutionModelConfig.cmake
-#  @ONLY
-#  )
+configure_file(
+  ${SlicerExecutionModel_SOURCE_DIR}/SlicerExecutionModelInstallConfig.cmake.in
+  ${SlicerExecutionModel_BINARY_DIR}/install/SlicerExecutionModelConfig.cmake
+  @ONLY
+  )
diff --git a/SlicerExecutionModelInstallConfig.cmake.in b/SlicerExecutionModelInstallConfig.cmake.in
new file mode 100644
index 0000000..c81dac1
--- /dev/null
+++ b/SlicerExecutionModelInstallConfig.cmake.in
@@ -0,0 +1,189 @@
+#
+# Typical usage could be something like:
+#
+#   find_package(SlicerExecutionModel REQUIRED)
+#   include(${SlicerExecutionModel_USE_FILE})
+#
+#   SEMMacroBuildCLI(...)
+##
+# When using the components argument, SlicerExecutionModel_USE_* variables are
+# automatically set for the SlicerExecutionModel_USE_FILE to pick up.
+# If one wishes to manually set them, the available ones to set include:
+#                    SlicerExecutionModel_USE_GENERATECLP
+#                    SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER
+#                    SlicerExecutionModel_USE_TCLAP
+#                    SlicerExecutionModel_USE_JSONCPP
+#                    SlicerExecutionModel_USE_SERIALIZER
+
+# Check if components where passed to find_package()
+if(SlicerExecutionModel_FIND_COMPONENTS)
+  foreach(component ${SlicerExecutionModel_FIND_COMPONENTS})
+    string(TOUPPER ${component} _COMPONENT)
+    set(SlicerExecutionModel_USE_${_COMPONENT} 1)
+  endforeach()
+endif()
+
+# If no components are passed, let's assume all components built by default are expected to be enabled.
+if(NOT SlicerExecutionModel_FIND_COMPONENTS)
+  set(SlicerExecutionModel_USE_GENERATECLP 1)
+  set(SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER 1)
+  set(SlicerExecutionModel_USE_TCLAP 1)
+endif()
+
+# SlicerExecutionModel_USE_JSONCPP is optional and it must be turned on at
+# build time.
+set(SlicerExecutionModel_BUILD_WITH_JSONCPP "@SlicerExecutionModel_USE_JSONCPP@")
+if(SlicerExecutionModel_USE_JSONCPP AND NOT SlicerExecutionModel_BUILD_WITH_JSONCPP)
+  message(SEND_ERROR "The JSONCPP COMPONENT for SlicerExecutionModel was requested,
+  but SlicerExecutionModel was not built with SlicerExecutionModel_USE_JSONCPP ON.")
+endif()
+set(SlicerExecutionModel_USE_JSONCPP ${SlicerExecutionModel_BUILD_WITH_JSONCPP})
+
+# SlicerExecutionModel_USE_SERIALIZER is optional and it must be turned on at
+# build time. It also depends on SlicerExecutionModel_USE_JSONCPP.
+set(SlicerExecutionModel_BUILD_WITH_SERIALIZER "@SlicerExecutionModel_USE_SERIALIZER@")
+if(SlicerExecutionModel_USE_SERIALIZER AND NOT SlicerExecutionModel_BUILD_WITH_SERIALIZER)
+  message(SEND_ERROR "The SERIALIZER COMPONENT for SlicerExecutionModel was requested,
+  but SlicerExecutionModel was not built with SlicerExecutionModel_USE_SERIALIZER ON.")
+endif()
+set(SlicerExecutionModel_USE_SERIALIZER ${SlicerExecutionModel_BUILD_WITH_SERIALIZER})
+if(SlicerExecutionModel_USE_SERIALIZER AND NOT SlicerExecutionModel_USE_JSONCPP)
+  message(SEND_ERROR "The SERIALIZER COMPONENT for SlicerExecutionModel was requested,
+  but SlicerExecutionModel it depends on the JSONCPP component.
+  Make sure SlicerExecutionModel_USE_JSONCPP is ON.")
+endif()
+
+# Set SlicerExecutionModel variables
+set(SlicerExecutionModel_INCLUDE_DIRS
+  "@SlicerExecutionModel_INCLUDE_DIRS_CONFIG@"
+  )
+set(SlicerExecutionModel_LIBRARIES
+  @SlicerExecutionModel_LIBRARIES_CONFIG@
+  )
+set(DEFAULT_SEM_TARGET_LIBRARIES
+  @DEFAULT_SEM_TARGET_LIBRARIES_CONFIG@
+  )
+set(SlicerExecutionModel_USE_FILE
+  "@SlicerExecutionModel_INSTALL_LIB_DIR@/UseSlicerExecutionModel.cmake"
+  )
+set(SlicerExecutionModel_CMAKE_DIR ${SlicerExecutionModel_INSTALL_LIB_DIR}/CMake)
+
+# If not already defined, set default "output directories" used by SEMMacroBuildCLI.cmake
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY)
+  set(SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY
+    "@SlicerExecutionModel_DEFAULT_CLI_RUNTIME_OUTPUT_DIRECTORY_CONFIG@"
+    )
+endif()
+
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY)
+  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY
+    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_OUTPUT_DIRECTORY_CONFIG@"
+    )
+endif()
+
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY)
+  set(SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY
+    "@SlicerExecutionModel_DEFAULT_CLI_ARCHIVE_OUTPUT_DIRECTORY_CONFIG@"
+    )
+endif()
+
+# If not already defined, set default "install destination" used by SEMMacroBuildCLI.cmake
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION)
+  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION
+    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_RUNTIME_DESTINATION_CONFIG@"
+    )
+endif()
+
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION)
+  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION
+    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_LIBRARY_DESTINATION_CONFIG@"
+    )
+endif()
+
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION)
+  set(SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION
+    "@SlicerExecutionModel_DEFAULT_CLI_INSTALL_ARCHIVE_DESTINATION_CONFIG@"
+    )
+endif()
+
+# If not already defined, set rpath flags used by SEMMacroBuildCLI.cmake
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS)
+  set(SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS
+    "@SlicerExecutionModel_DEFAULT_CLI_EXECUTABLE_LINK_FLAGS@"
+    )
+endif()
+
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS)
+  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS
+    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_LINK_FLAGS@"
+    )
+endif()
+
+# If not already defined, set default library wrapper used by SEMMacroBuildCLI.cmake
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX)
+  set(SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX
+    "@SlicerExecutionModel_DEFAULT_CLI_LIBRARY_WRAPPER_CXX_CONFIG@"
+    )
+endif()
+
+# If not already defined, set default "cli targets folder prefix" used by SEMMacroBuildCLI.cmake
+if(NOT DEFINED SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX)
+  set(SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX
+    "@SlicerExecutionModel_DEFAULT_CLI_TARGETS_FOLDER_PREFIX_CONFIG@"
+    )
+endif()
+
+# The SlicerExecutionModel targets file.
+if(NOT TARGET GenerateCLP AND EXISTS "@SlicerExecutionModel_EXPORT_FILE@")
+  include("@SlicerExecutionModel_EXPORT_FILE@")
+endif()
+
+# Set *_DIR variable so that find_package() works appropriately
+set(ModuleDescriptionParser_DIR ${SlicerExecutionModel_INSTALL_LIB_DIR}/ModuleDescriptionParser)
+set(GenerateCLP_DIR ${SlicerExecutionModel_INSTALL_LIB_DIR}/GenerateCLP)
+set(TCLAP_DIR ${SlicerExecutionModel_INSTALL_LIB_DIR}/tclap)
+set(JsonCpp_INCLUDE_DIR "@JsonCpp_INCLUDE_DIR@")
+set(JsonCpp_LIBRARY "@JsonCpp_LIBRARY@")
+set(ParameterSerializer_DIR "@ParameterSerializer_DIR@")
+
+#
+# Find ModuleDescriptionParser, GenerateCLP and TCLAP so that the associated
+# variables (ModuleDescriptionParser_INCLUDE_DIRS, ...) are exposed.
+#
+if(SlicerExecutionModel_USE_MODULEDESCRIPTIONPARSER)
+  find_package(ModuleDescriptionParser REQUIRED)
+endif()
+
+if(SlicerExecutionModel_USE_GENERATECLP)
+  find_package(GenerateCLP REQUIRED)
+endif()
+
+if(SlicerExecutionModel_USE_TCLAP)
+  find_package(TCLAP REQUIRED)
+endif()
+
+if(SlicerExecutionModel_USE_JSONCPP)
+  # Add FindJsonCpp.cmake to module path
+  set(CMAKE_MODULE_PATH ${SlicerExecutionModel_CMAKE_DIR} ${CMAKE_MODULE_PATH})
+  find_package(JsonCpp REQUIRED)
+
+  if(WIN32)
+    add_definitions(-DJSON_DLL)
+  endif()
+endif()
+
+if(SlicerExecutionModel_USE_SERIALIZER)
+  find_package(ParameterSerializer REQUIRED)
+endif()
+
+set(_extra_config_file "@SlicerExecutionModel_EXTRA_CONFIG_FILE@")
+if(_extra_config_file)
+  include(${_extra_config_file})
+endif()
+
+set(SlicerExecutionModel_LIBRARY_DIRS
+  "@SlicerExecutionModel_LIBRARY_DIRS_CONFIG@"
+  ${GenerateCLP_LIBRARY_DIRS}
+  ${ModuleDescriptionParser_LIBRARY_DIRS}
+  ${TCLAP_LIBRARY_DIRS}
+  )
-- 
2.21.0

