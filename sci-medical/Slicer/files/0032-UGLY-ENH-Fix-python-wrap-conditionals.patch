From 092a619a12f4ef63179f71603844026fa02ea76e Mon Sep 17 00:00:00 2001
From: Rafael Palomar <rafael.palomar@ous-research.no>
Date: Sat, 25 Mar 2023 12:49:45 +0100
Subject: [PATCH 32/32] UGLY-ENH: Fix python wrap conditionals

This introduces `Slicer_USE_PYTHONQT` as a variable to consider for
python wrapping in `Base` and `Libs` components. This should probably be
merged with the developments on Slicer/Slicer#6895 and with the
modernization of the python detection in earlier Systole patches
---
 Base/Logic/CMakeLists.txt                    |  4 +-
 Base/QTCLI/CMakeLists.txt                    |  4 +-
 Base/QTCore/CMakeLists.txt                   |  9 +-
 Base/QTCore/qSlicerLoadableModuleFactory.cxx | 87 ++++++++++----------
 Libs/MRML/Core/CMakeLists.txt                |  2 +-
 Libs/MRML/Logic/CMakeLists.txt               |  2 +-
 Libs/vtkITK/CMakeLists.txt                   |  2 +-
 Libs/vtkSegmentationCore/CMakeLists.txt      |  2 +-
 Libs/vtkTeem/CMakeLists.txt                  |  4 +-
 9 files changed, 59 insertions(+), 57 deletions(-)

diff --git a/Base/Logic/CMakeLists.txt b/Base/Logic/CMakeLists.txt
index 3822e358d9..2cfaf17cd8 100644
--- a/Base/Logic/CMakeLists.txt
+++ b/Base/Logic/CMakeLists.txt
@@ -15,7 +15,7 @@ endif()
 # VTK
 #
 if(Slicer_USE_PYTHONQT AND NOT VTK_WRAP_PYTHON)
-  message(FATAL_ERROR "Since Slicer_USE_PYTHONQT is ON, VTK_WRAP_PYTHON is expected to be ON. "
+  message(FATAL_ERROR "Since Slicer_USE_PYTHONQT is ON, Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON is expected to be ON. "
                       "Re-configure VTK with python wrapping.")
 endif()
 
@@ -196,7 +196,7 @@ install(TARGETS ${lib_name}
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON)
   include(vtkMacroKitPythonWrap)
 
   set(_python_wrapped_libraries
diff --git a/Base/QTCLI/CMakeLists.txt b/Base/QTCLI/CMakeLists.txt
index e78d475db9..6ca2bd9903 100644
--- a/Base/QTCLI/CMakeLists.txt
+++ b/Base/QTCLI/CMakeLists.txt
@@ -94,7 +94,7 @@ set(KIT_target_libraries
   ModuleDescriptionParser ${ITK_LIBRARIES}
   MRMLCLI
   )
-if(VTK_WRAP_PYTHON AND ${VTK_VERSION} VERSION_GREATER_EQUAL "8.90")
+if(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON AND ${VTK_VERSION} VERSION_GREATER_EQUAL "8.90")
   # HACK Explicitly list transitive VTK dependencies because _get_dependencies_recurse
   # used in vtkAddon/CMake/vtkMacroKitPythonWrap.cmake only recurses over dependencies
   # that are VTK python wrapped.
@@ -149,7 +149,7 @@ endif()
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON)
   include(vtkMacroKitPythonWrap)
 
   set(_python_wrapped_libraries
diff --git a/Base/QTCore/CMakeLists.txt b/Base/QTCore/CMakeLists.txt
index c1d406d2d3..0b6c1a9f68 100644
--- a/Base/QTCore/CMakeLists.txt
+++ b/Base/QTCore/CMakeLists.txt
@@ -266,6 +266,11 @@ if(Slicer_USE_PYTHONQT)
 
 endif()
 
+set(WRAP_PYTHONQT)
+if(Slicer_USE_PYTHONQT)
+  set(WRAP_PYTHONQT WRAP_PYTHONQT)
+endif()
+
 SlicerMacroBuildBaseQtLibrary(
   NAME ${PROJECT_NAME}
   EXPORT_DIRECTIVE ${KIT_export_directive}
@@ -274,10 +279,10 @@ SlicerMacroBuildBaseQtLibrary(
   MOC_SRCS ${KIT_MOC_SRCS}
   TARGET_LIBRARIES ${KIT_target_libraries}
   RESOURCES ${KIT_resources}
-  WRAP_PYTHONQT
+  ${WRAP_PYTHONQT}
   )
 
-if(Slicer_USE_PYTHONQT_WITH_OPENSSL)
+if(Slicer_USE_PYTHONQT AND Slicer_USE_PYTHONQT_WITH_OPENSSL)
   configure_file(
     Resources/Certs/Slicer.crt
     ${Slicer_BINARY_DIR}/${Slicer_SHARE_DIR}/Slicer.crt
diff --git a/Base/QTCore/qSlicerLoadableModuleFactory.cxx b/Base/QTCore/qSlicerLoadableModuleFactory.cxx
index 9463db4ef6..667bfb0015 100644
--- a/Base/QTCore/qSlicerLoadableModuleFactory.cxx
+++ b/Base/QTCore/qSlicerLoadableModuleFactory.cxx
@@ -37,64 +37,61 @@
 //-----------------------------------------------------------------------------
 qSlicerLoadableModuleFactoryItem::qSlicerLoadableModuleFactoryItem() = default;
 
+
+#ifdef Slicer_USE_PYTHONQT
 #include "qSlicerCorePythonManager.h"
+
 namespace
 {
 
-//-----------------------------------------------------------------------------
-bool importModulePythonExtensions(
-    qSlicerCorePythonManager * pythonManager,
-    const QString& intDir,const QString& modulePath,
-    bool isEmbedded)
-{
-  Q_UNUSED(intDir);
-#ifdef Slicer_USE_PYTHONQT
-  if(!pythonManager)
-    {
-    return false;
-    }
+  //-----------------------------------------------------------------------------
+  bool importModulePythonExtensions(
+                                    qSlicerCorePythonManager * pythonManager,
+                                    const QString& intDir,const QString& modulePath,
+                                    bool isEmbedded)
+  {
+    Q_UNUSED(intDir);
+    if(!pythonManager)
+      {
+        return false;
+      }
 
-  QString pythonModuleDir = QFileInfo(modulePath).absoluteFilePath();
-  if (!QFileInfo(pythonModuleDir).isDir())
-    {
-    pythonModuleDir = QFileInfo(pythonModuleDir).absolutePath();
-    }
+    QString pythonModuleDir = QFileInfo(modulePath).absoluteFilePath();
+    if (!QFileInfo(pythonModuleDir).isDir())
+      {
+        pythonModuleDir = QFileInfo(pythonModuleDir).absolutePath();
+      }
 
-  // Update current application directory, so that *PythonD modules can be loaded
-  ctkScopedCurrentDir scopedCurrentDir(pythonModuleDir);
+    // Update current application directory, so that *PythonD modules can be loaded
+    ctkScopedCurrentDir scopedCurrentDir(pythonModuleDir);
 
-  if (!isEmbedded)
-    {
-    QStringList paths; paths << scopedCurrentDir.currentPath();
-    pythonManager->appendPythonPaths(paths);
-    }
+    if (!isEmbedded)
+      {
+        QStringList paths; paths << scopedCurrentDir.currentPath();
+        pythonManager->appendPythonPaths(paths);
+      }
 
-  pythonManager->executeString(QString(
-        "from slicer.util import importVTKClassesFromDirectory;"
-        "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleLogicPython.*');"
-        "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleMRMLPython.*');"
-        "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleMRMLDisplayableManagerPython.*');"
-        "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleVTKWidgetsPython.*');"
-        ).arg(qSlicerCorePythonManager::toPythonStringLiteral(scopedCurrentDir.currentPath())));
-  pythonManager->executeString(QString(
-        "from slicer.util import importQtClassesFromDirectory;"
-        "importQtClassesFromDirectory(%1, 'slicer', filematch='qSlicer*PythonQt.*');"
-        ).arg(qSlicerCorePythonManager::toPythonStringLiteral(scopedCurrentDir.currentPath())));
-  return !pythonManager->pythonErrorOccured();
-#else
-  Q_UNUSED(isEmbedded);
-  Q_UNUSED(modulePath);
-  Q_UNUSED(pythonManager);
-  return false;
-#endif
-}
-}
+    pythonManager->executeString(QString(
+                                         "from slicer.util import importVTKClassesFromDirectory;"
+                                         "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleLogicPython.*');"
+                                         "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleMRMLPython.*');"
+                                         "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleMRMLDisplayableManagerPython.*');"
+                                         "importVTKClassesFromDirectory(%1, 'slicer', filematch='vtkSlicer*ModuleVTKWidgetsPython.*');"
+                                         ).arg(qSlicerCorePythonManager::toPythonStringLiteral(scopedCurrentDir.currentPath())));
+    pythonManager->executeString(QString(
+                                         "from slicer.util import importQtClassesFromDirectory;"
+                                         "importQtClassesFromDirectory(%1, 'slicer', filematch='qSlicer*PythonQt.*');"
+                                         ).arg(qSlicerCorePythonManager::toPythonStringLiteral(scopedCurrentDir.currentPath())));
+    return !pythonManager->pythonErrorOccured();
+  }
 
+}
+#endif
 //-----------------------------------------------------------------------------
 qSlicerAbstractCoreModule* qSlicerLoadableModuleFactoryItem::instanciator()
 {
   qSlicerAbstractCoreModule * module =
-      ctkFactoryPluginItem<qSlicerAbstractCoreModule>::instanciator();
+    ctkFactoryPluginItem<qSlicerAbstractCoreModule>::instanciator();
   module->setPath(this->path());
 
   qSlicerCoreApplication * app = qSlicerCoreApplication::application();
diff --git a/Libs/MRML/Core/CMakeLists.txt b/Libs/MRML/Core/CMakeLists.txt
index bdf42da526..cab3d8432a 100644
--- a/Libs/MRML/Core/CMakeLists.txt
+++ b/Libs/MRML/Core/CMakeLists.txt
@@ -354,7 +354,7 @@ install(TARGETS ${lib_name}
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT)
   vtkMacroKitPythonWrap(
     KIT_NAME ${lib_name}
     KIT_SRCS ${MRMLCore_SRCS}
diff --git a/Libs/MRML/Logic/CMakeLists.txt b/Libs/MRML/Logic/CMakeLists.txt
index d9f47ac67b..492664e9a8 100644
--- a/Libs/MRML/Logic/CMakeLists.txt
+++ b/Libs/MRML/Logic/CMakeLists.txt
@@ -141,7 +141,7 @@ install(TARGETS ${lib_name}
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT AND VTK_WRAP_PYTHON)
   include(vtkMacroKitPythonWrap)
 
   set(_python_wrapped_libraries)
diff --git a/Libs/vtkITK/CMakeLists.txt b/Libs/vtkITK/CMakeLists.txt
index 6f74979e14..c51e65031d 100644
--- a/Libs/vtkITK/CMakeLists.txt
+++ b/Libs/vtkITK/CMakeLists.txt
@@ -213,7 +213,7 @@ install(TARGETS ${lib_name}
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT)
   vtkMacroKitPythonWrap(
     KIT_NAME ${lib_name}
     KIT_SRCS ${vtkITK_SRCS}
diff --git a/Libs/vtkSegmentationCore/CMakeLists.txt b/Libs/vtkSegmentationCore/CMakeLists.txt
index 97487ef003..ef616db4dd 100644
--- a/Libs/vtkSegmentationCore/CMakeLists.txt
+++ b/Libs/vtkSegmentationCore/CMakeLists.txt
@@ -149,7 +149,7 @@ install(TARGETS ${PROJECT_NAME}
 # --------------------------------------------------------------------------
 # Python wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON AND BUILD_SHARED_LIBS)
+if(Slicer_USE_PYTHONQT AND BUILD_SHARED_LIBS)
 
   set(Slicer_Wrapped_LIBRARIES
     )
diff --git a/Libs/vtkTeem/CMakeLists.txt b/Libs/vtkTeem/CMakeLists.txt
index 0eeb3cccf3..2abc6d11a8 100644
--- a/Libs/vtkTeem/CMakeLists.txt
+++ b/Libs/vtkTeem/CMakeLists.txt
@@ -45,7 +45,7 @@ include(${Teem_USE_FILE})
 #     See https://sourceforge.net/p/teem/code/4168/
 set(Teem_LIBRARIES teem)
 
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT)
   find_package(vtkAddon REQUIRED)
 endif()
 
@@ -150,7 +150,7 @@ install(TARGETS ${lib_name}
 # --------------------------------------------------------------------------
 # Python Wrapping
 # --------------------------------------------------------------------------
-if(VTK_WRAP_PYTHON)
+if(Slicer_USE_PYTHONQT)
   include(vtkMacroKitPythonWrap)
 
   vtkMacroKitPythonWrap(
-- 
2.39.2

