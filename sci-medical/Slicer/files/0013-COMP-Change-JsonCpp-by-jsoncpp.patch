From 09401c284b6b49d8ea45a581cf07322b9adf081f Mon Sep 17 00:00:00 2001
From: Rafael Palomar <rafael.palomar@rr-research.no>
Date: Wed, 18 Dec 2019 07:46:25 +0100
Subject: [PATCH 13/20] COMP: Change JsonCpp by jsoncpp

This makes it work with own external packages
---
 CMake/CTestCustom.cmake.in                         |  2 +-
 CMake/SlicerBlockInstallCMakeProjects.cmake        |  8 ++++----
 CMake/SlicerCPackBundleFixup.cmake.in              |  2 +-
 .../Loadable/VolumeRendering/MRML/CMakeLists.txt   |  7 ++++---
 SuperBuild.cmake                                   |  4 ++--
 SuperBuild/External_JsonCpp.cmake                  | 14 +++++++-------
 SuperBuild/External_ParameterSerializer.cmake      |  6 +++---
 SuperBuild/External_SlicerExecutionModel.cmake     |  6 +++---
 8 files changed, 25 insertions(+), 24 deletions(-)

diff --git a/CMake/CTestCustom.cmake.in b/CMake/CTestCustom.cmake.in
index 0435b5cd9..8da90413b 100644
--- a/CMake/CTestCustom.cmake.in
+++ b/CMake/CTestCustom.cmake.in
@@ -146,7 +146,7 @@ set(CTEST_CUSTOM_WARNING_EXCEPTION
   # EMSegment
   "warning: the use of .mktemp. is dangerous, better use .mkstemp."
 
-  # JsonCpp
+  # jsoncpp
   "json.(reader|value).h.*warning C4275.*non dll-interface class"
 
   # Libs/tclap
diff --git a/CMake/SlicerBlockInstallCMakeProjects.cmake b/CMake/SlicerBlockInstallCMakeProjects.cmake
index e9f7aded3..54f152e61 100644
--- a/CMake/SlicerBlockInstallCMakeProjects.cmake
+++ b/CMake/SlicerBlockInstallCMakeProjects.cmake
@@ -42,15 +42,15 @@ if(NOT "${SimpleITK_DIR}" STREQUAL "" AND EXISTS "${SimpleITK_DIR}/CMakeCache.tx
 endif()
 
 # -------------------------------------------------------------------------
-# Install JsonCpp
+# Install jsoncpp
 # -------------------------------------------------------------------------
 
-# JsonCpp is required to build VolumeRendering module
+# jsoncpp is required to build VolumeRendering module
 slicer_is_loadable_builtin_module_enabled("VolumeRendering" _build_volume_rendering_module)
 
 if((Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT OR _build_volume_rendering_module)
-  AND NOT "${JsonCpp_DIR}" STREQUAL "" AND EXISTS "${JsonCpp_DIR}/CMakeCache.txt")
-  set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${JsonCpp_DIR};JsonCpp;Unspecified;/")
+  AND NOT "${jsoncpp_DIR}" STREQUAL "" AND EXISTS "${jsoncpp_DIR}/CMakeCache.txt")
+  set(CPACK_INSTALL_CMAKE_PROJECTS "${CPACK_INSTALL_CMAKE_PROJECTS};${jsoncpp_DIR};jsoncpp;Unspecified;/")
 endif()
 
 # -------------------------------------------------------------------------
diff --git a/CMake/SlicerCPackBundleFixup.cmake.in b/CMake/SlicerCPackBundleFixup.cmake.in
index 2fffb5f0a..7bc8599c7 100644
--- a/CMake/SlicerCPackBundleFixup.cmake.in
+++ b/CMake/SlicerCPackBundleFixup.cmake.in
@@ -225,7 +225,7 @@ function(fixup_bundle_with_plugins app)
     _fixup_paths_append(libs_path ${dir})
   endforeach()
   if(Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT)
-    foreach(dir "@JsonCpp_LIBRARY_DIRS@")
+    foreach(dir "@jsoncpp_LIBRARY_DIRS@")
       _fixup_paths_append(libs_path ${dir})
     endforeach()
   endif()
diff --git a/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt b/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt
index a6490a24e..cefec7715 100644
--- a/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt
+++ b/Modules/Loadable/VolumeRendering/MRML/CMakeLists.txt
@@ -4,10 +4,11 @@ set(KIT ${PROJECT_NAME})
 
 set(${KIT}_EXPORT_DIRECTIVE "VTK_SLICER_${MODULE_NAME_UPPER}_MODULE_MRML_EXPORT")
 
-find_package(JsonCpp REQUIRED)
+find_package(jsoncpp REQUIRED)
+get_target_property(jsoncpp_INCLUDE_DIRS jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
 
 set(${KIT}_INCLUDE_DIRECTORIES
-  ${JsonCpp_INCLUDE_DIR}
+  ${jsoncpp_INCLUDE_DIRS}
   )
 
 set(${KIT}_SRCS
@@ -31,7 +32,7 @@ set(${KIT}_SRCS
 
 set(${KIT}_TARGET_LIBRARIES
   ${ITK_LIBRARIES}
-  ${JsonCpp_LIBRARY}
+  jsoncpp_lib
   ${MRML_LIBRARIES}
   vtkSlicerAnnotationsModuleMRML
   )
diff --git a/SuperBuild.cmake b/SuperBuild.cmake
index bdce5120d..395b707a1 100644
--- a/SuperBuild.cmake
+++ b/SuperBuild.cmake
@@ -161,10 +161,10 @@ endif()
 
 include(SlicerCheckModuleEnabled)
 
-# JsonCpp is required to build VolumeRendering module
+# jsoncpp is required to build VolumeRendering module
 slicer_is_loadable_builtin_module_enabled("VolumeRendering" _build_volume_rendering_module)
 if(_build_volume_rendering_module)
-  list(APPEND Slicer_DEPENDENCIES JsonCpp)
+  list(APPEND Slicer_DEPENDENCIES jsoncpp)
 endif()
 
 #------------------------------------------------------------------------------
diff --git a/SuperBuild/External_JsonCpp.cmake b/SuperBuild/External_JsonCpp.cmake
index 40f7f8624..995232ffa 100644
--- a/SuperBuild/External_JsonCpp.cmake
+++ b/SuperBuild/External_JsonCpp.cmake
@@ -1,5 +1,5 @@
 
-set( proj JsonCpp )
+set( proj jsoncpp )
 
 # Set dependency list
 set(${proj}_DEPENDENCIES "")
@@ -80,7 +80,7 @@ if(NOT DEFINED ${proj}_DIR AND NOT Slicer_USE_SYSTEM_${proj})
   #-----------------------------------------------------------------------------
   # Launcher setting specific to build tree
 
-  set(${proj}_LIBRARY_PATHS_LAUNCHER_BUILD ${JsonCpp_DIR}/src/lib_json/<CMAKE_CFG_INTDIR>)
+  set(${proj}_LIBRARY_PATHS_LAUNCHER_BUILD ${jsoncpp_DIR}/src/lib_json/<CMAKE_CFG_INTDIR>)
   mark_as_superbuild(
     VARS ${proj}_LIBRARY_PATHS_LAUNCHER_BUILD
     LABELS "LIBRARY_PATHS_LAUNCHER_BUILD"
@@ -98,12 +98,12 @@ mark_as_superbuild(
   VARS ${proj}_LIBRARY:PATH
   LABELS "FIND_PACKAGE"
   )
-# JsonCpp is a project built using CMake. JsconCpp_DIR ensures the install
-# rules will be used to create the Slicer package. However because JsonCpp
-# doesn't provide a JsonCppConfig.cmake, it is not yet associated with the
+# jsoncpp is a project built using CMake. JsconCpp_DIR ensures the install
+# rules will be used to create the Slicer package. However because jsoncpp
+# doesn't provide a jsoncppConfig.cmake, it is not yet associated with the
 # "FIND_PACKAGE" label.
-# Instead the variables JsonCpp_INCLUDE_DIR and JsonCpp_LIBRARY are
-# expected to be set to ensure FindJsonCpp.cmake finds everything.
+# Instead the variables jsoncpp_INCLUDE_DIR and jsoncpp_LIBRARY are
+# expected to be set to ensure Findjsoncpp.cmake finds everything.
 mark_as_superbuild(
   VARS ${proj}_DIR:PATH
   )
diff --git a/SuperBuild/External_ParameterSerializer.cmake b/SuperBuild/External_ParameterSerializer.cmake
index 8a13f14c3..35804f53b 100644
--- a/SuperBuild/External_ParameterSerializer.cmake
+++ b/SuperBuild/External_ParameterSerializer.cmake
@@ -2,7 +2,7 @@
 set( proj ParameterSerializer )
 
 # Set dependency list
-set(${proj}_DEPENDENCIES JsonCpp ITK)
+set(${proj}_DEPENDENCIES jsoncpp ITK)
 
 # Include dependent projects if any
 ExternalProject_Include_Dependencies(${proj} PROJECT_VAR proj DEPENDS_VAR ${proj}_DEPENDENCIES)
@@ -48,8 +48,8 @@ if(NOT DEFINED ${proj}_DIR AND NOT Slicer_USE_SYSTEM_${proj})
       -DCMAKE_CXX_EXTENSIONS:BOOL=${CMAKE_CXX_EXTENSIONS}
       -DBUILD_TESTING:BOOL=OFF
       #-DBUILD_SHARED:BOOL=ON
-      -DJsonCpp_INCLUDE_DIR:PATH=${JsonCpp_INCLUDE_DIR}
-      -DJsonCpp_LIBRARY:PATH=${JsonCpp_LIBRARY}
+      -Djsoncpp_INCLUDE_DIR:PATH=${jsoncpp_INCLUDE_DIR}
+      -Djsoncpp_LIBRARY:PATH=${jsoncpp_LIBRARY}
       -DITK_DIR:PATH=${ITK_DIR}
     INSTALL_COMMAND ""
     DEPENDS
diff --git a/SuperBuild/External_SlicerExecutionModel.cmake b/SuperBuild/External_SlicerExecutionModel.cmake
index ce7b93dcc..7f87f2842 100644
--- a/SuperBuild/External_SlicerExecutionModel.cmake
+++ b/SuperBuild/External_SlicerExecutionModel.cmake
@@ -5,7 +5,7 @@ set(proj SlicerExecutionModel)
 set(${proj}_DEPENDENCIES ${ITK_EXTERNAL_NAME})
 
 if(Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT)
-  set(${proj}_DEPENDENCIES ${${proj}_DEPENDENCIES} JsonCpp ParameterSerializer)
+  set(${proj}_DEPENDENCIES ${${proj}_DEPENDENCIES} jsoncpp ParameterSerializer)
 endif()
 
 # Include dependent projects if any
@@ -33,13 +33,13 @@ if(NOT DEFINED SlicerExecutionModel_DIR AND NOT Slicer_USE_SYSTEM_${proj})
 
   if(Slicer_BUILD_PARAMETERSERIALIZER_SUPPORT)
     list(APPEND EXTERNAL_PROJECT_OPTIONAL_CMAKE_CACHE_ARGS
-      -DJsonCpp_INCLUDE_DIR:PATH=${JsonCpp_INCLUDE_DIR}
+      -Djsoncpp_INCLUDE_DIR:PATH=${jsoncpp_INCLUDE_DIR}
       -DParameterSerializer_DIR:PATH=${ParameterSerializer_DIR}
       )
     # JsoncCpp_LIBRARY needs to be added as a CMAKE_ARGS because it contains an
     # expression that needs to be evaluated
     list(APPEND EXTERNAL_PROJECT_OPTIONAL_CMAKE_ARGS
-      -DJsonCpp_LIBRARY:PATH=${JsonCpp_LIBRARY}
+      -Djsoncpp_LIBRARY:PATH=${jsoncpp_LIBRARY}
       )
   endif()
 
-- 
2.24.1

